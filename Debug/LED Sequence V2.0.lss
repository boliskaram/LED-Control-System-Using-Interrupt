
LED Sequence V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144b  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00001d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a82  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3f  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000046e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_1>
   8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 34 01 	call	0x268	; 0x268 <main>
  74:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXTI0_ISR>:
static uint8_t Count = 0 ;
EN_LED_STATUS_t LED_ERROR = LED_OK ;
EN_EXTI_STATUS_t EXTI_ERROR = EXTI_OK ;

void EXTI0_ISR(void){
	if (Count == 8)
  7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	21 f4       	brne	.+8      	; 0x8c <EXTI0_ISR+0x10>
	{
		Count = 1; 
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Count>
  8a:	08 95       	ret
	}
	else
	{
		Count++ ;
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Count>
  92:	08 95       	ret

00000094 <APP_Init>:
	}
}

void APP_Init(void){
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <APP_Init+0xa>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <APP_Init+0xc>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <APP_Init+0xe>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	//---------------------------------------------------------------------------------------------
	
	ST_LED_Config_t LED_Config;
	
	
	LED_Config.LED_Port = PORT_A ;
  a6:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN0 ;
  a8:	19 82       	std	Y+1, r1	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
  b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	
	LED_Config.LED_Port = PORT_A ;
  b6:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN1 ;
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	19 83       	std	Y+1, r17	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	
	LED_Config.LED_Port = PORT_A ;
  c8:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN2 ;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	89 83       	std	Y+1, r24	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
  d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	
	LED_Config.LED_Port = PORT_A ;
  da:	1a 82       	std	Y+2, r1	; 0x02
	LED_Config.LED_Pin = PIN3 ;
  dc:	03 e0       	ldi	r16, 0x03	; 3
  de:	09 83       	std	Y+1, r16	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
  e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	
	LED_Config.LED_Port = PORT_B ;
  ec:	1a 83       	std	Y+2, r17	; 0x02
	LED_Config.LED_Pin = PIN0 ;
  ee:	19 82       	std	Y+1, r1	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
  f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	
	LED_Config.LED_Port = PORT_B ;
  fc:	1a 83       	std	Y+2, r17	; 0x02
	LED_Config.LED_Pin = PIN1 ;
  fe:	19 83       	std	Y+1, r17	; 0x01
	LED_ERROR = ECUAL_LED_Init(&LED_Config);
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ECUAL_LED_Init>
 108:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
	//---------------------------------------------------------------------------------------------
	
	
	ST_EXTI_Config_t EXTI_config;
	
	EXTI_config.EXTI_NAME = INT_0;
 10c:	1b 82       	std	Y+3, r1	; 0x03
	EXTI_config.EXTI_MODE = RISING_EDGE_MODE;
 10e:	0c 83       	std	Y+4, r16	; 0x04
	EXTI_config.P_IRQ_CallBack = EXTI0_ISR;
 110:	8e e3       	ldi	r24, 0x3E	; 62
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9e 83       	std	Y+6, r25	; 0x06
 116:	8d 83       	std	Y+5, r24	; 0x05
	EXTI_ERROR = MCAL_EXTI_Init(&EXTI_config);
 118:	ce 01       	movw	r24, r28
 11a:	03 96       	adiw	r24, 0x03	; 3
 11c:	0e 94 a6 02 	call	0x54c	; 0x54c <MCAL_EXTI_Init>
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 124:	26 96       	adiw	r28, 0x06	; 6
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <APP_Update>:
	
	
void APP_Update(void){
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <APP_Update+0x6>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	
	ST_LED_Config_t LED_Config;
		
	if (EXTI_ERROR == EXTI_NAME_ERROR )
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	49 f4       	brne	.+18     	; 0x15e <APP_Update+0x24>
	{
		LED_Config.LED_Port = PORT_B ;
 14c:	8a 83       	std	Y+2, r24	; 0x02
		LED_Config.LED_Pin = PIN0;
 14e:	19 82       	std	Y+1, r1	; 0x01
		LED_ERROR = ECUAL_LED_ON(&LED_Config);
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ECUAL_LED_ON>
 158:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
 15c:	26 c0       	rjmp	.+76     	; 0x1aa <APP_Update+0x70>
	}
	else if (EXTI_ERROR == EXTI_MODE_ERROR)
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	51 f4       	brne	.+20     	; 0x176 <APP_Update+0x3c>
	{
		LED_Config.LED_Port = PORT_B ;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 83       	std	Y+2, r24	; 0x02
		LED_Config.LED_Pin = PIN1;
 166:	89 83       	std	Y+1, r24	; 0x01
		LED_ERROR = ECUAL_LED_ON(&LED_Config);
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ECUAL_LED_ON>
 170:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
 174:	1a c0       	rjmp	.+52     	; 0x1aa <APP_Update+0x70>
	}
	else
	{
		if(Count >= 1 && Count <= 4){
 176:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Count>
 17a:	9f ef       	ldi	r25, 0xFF	; 255
 17c:	98 0f       	add	r25, r24
 17e:	94 30       	cpi	r25, 0x04	; 4
 180:	48 f4       	brcc	.+18     	; 0x194 <APP_Update+0x5a>
			LED_Config.LED_Port = PORT_A ;
 182:	1a 82       	std	Y+2, r1	; 0x02
			LED_Config.LED_Pin = PIN0 + (Count-1) ;
 184:	99 83       	std	Y+1, r25	; 0x01
			LED_ERROR = ECUAL_LED_ON(&LED_Config);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ECUAL_LED_ON>
 18e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
 192:	0b c0       	rjmp	.+22     	; 0x1aa <APP_Update+0x70>
		}
		else if(Count >= 5 && Count <= 8 ){
 194:	85 50       	subi	r24, 0x05	; 5
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	40 f4       	brcc	.+16     	; 0x1aa <APP_Update+0x70>
			LED_Config.LED_Port = PORT_A ;
 19a:	1a 82       	std	Y+2, r1	; 0x02
			LED_Config.LED_Pin = PIN0 + (Count-5);
 19c:	89 83       	std	Y+1, r24	; 0x01
			LED_ERROR = ECUAL_LED_OFF(&LED_Config);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 17 01 	call	0x22e	; 0x22e <ECUAL_LED_OFF>
 1a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_ERROR>
		}
	}
	
	
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <ECUAL_LED_Init>:
 */ 


#include "LED.h"

EN_LED_STATUS_t ECUAL_LED_Init(ST_LED_Config_t* LED_Config){
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <ECUAL_LED_Init+0x6>
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	ST_DIO_Config_t DIO_Config;
	DIO_Config.direction = OUTPUT ;
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	2b 83       	std	Y+3, r18	; 0x03
	DIO_Config.portName = LED_Config->LED_Port;
 1c4:	fc 01       	movw	r30, r24
 1c6:	21 81       	ldd	r18, Z+1	; 0x01
 1c8:	29 83       	std	Y+1, r18	; 0x01
	DIO_Config.pinNumber = LED_Config->LED_Pin;
 1ca:	80 81       	ld	r24, Z
 1cc:	8a 83       	std	Y+2, r24	; 0x02
	
	DIO_Error = MCAL_DIO_Init_Pin(&DIO_Config);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 39 01 	call	0x272	; 0x272 <MCAL_DIO_Init_Pin>
	
	if(DIO_Error == PIN_ERROR)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	21 f0       	breq	.+8      	; 0x1e2 <ECUAL_LED_Init+0x2e>
	{
		errorStatus = LED_PIN_ERROR ;
	}
	else if(DIO_Error == PORT_ERROR)
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	21 f0       	breq	.+8      	; 0x1e6 <ECUAL_LED_Init+0x32>
	{
		errorStatus = LED_PORT_ERROR ;
	}
	else
	{
		errorStatus = LED_OK ;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <ECUAL_LED_Init+0x34>
	
	DIO_Error = MCAL_DIO_Init_Pin(&DIO_Config);
	
	if(DIO_Error == PIN_ERROR)
	{
		errorStatus = LED_PIN_ERROR ;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <ECUAL_LED_Init+0x34>
	}
	else if(DIO_Error == PORT_ERROR)
	{
		errorStatus = LED_PORT_ERROR ;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
	{
		errorStatus = LED_OK ;
	}
	
	return errorStatus ;
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <ECUAL_LED_ON>:


EN_LED_STATUS_t ECUAL_LED_ON(ST_LED_Config_t* LED_Config){
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <ECUAL_LED_ON+0x6>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	ST_DIO_Data_Config_t DIO_DConfig;
	DIO_DConfig.portName = LED_Config->LED_Port;
 1fe:	fc 01       	movw	r30, r24
 200:	21 81       	ldd	r18, Z+1	; 0x01
 202:	29 83       	std	Y+1, r18	; 0x01
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
 204:	80 81       	ld	r24, Z
 206:	8a 83       	std	Y+2, r24	; 0x02
	
	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,High);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MCAL_DIO_Write_Pin>
	
	if(DIO_Error == PIN_ERROR){
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	21 f0       	breq	.+8      	; 0x21e <ECUAL_LED_ON+0x2a>
		errorStatus = LED_PIN_ERROR ;
		}else if(DIO_Error == PORT_ERROR){
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	21 f0       	breq	.+8      	; 0x222 <ECUAL_LED_ON+0x2e>
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	03 c0       	rjmp	.+6      	; 0x224 <ECUAL_LED_ON+0x30>
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
	
	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,High);
	
	if(DIO_Error == PIN_ERROR){
		errorStatus = LED_PIN_ERROR ;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	01 c0       	rjmp	.+2      	; 0x224 <ECUAL_LED_ON+0x30>
		}else if(DIO_Error == PORT_ERROR){
		errorStatus = LED_PORT_ERROR ;
 222:	82 e0       	ldi	r24, 0x02	; 2
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <ECUAL_LED_OFF>:


EN_LED_STATUS_t ECUAL_LED_OFF(ST_LED_Config_t* LED_Config){
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <ECUAL_LED_OFF+0x6>
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;

	ST_DIO_Data_Config_t DIO_DConfig;
	DIO_DConfig.portName = LED_Config->LED_Port;
 238:	fc 01       	movw	r30, r24
 23a:	21 81       	ldd	r18, Z+1	; 0x01
 23c:	29 83       	std	Y+1, r18	; 0x01
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;
 23e:	80 81       	ld	r24, Z
 240:	8a 83       	std	Y+2, r24	; 0x02

	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,LOW);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	0e 94 f5 01 	call	0x3ea	; 0x3ea <MCAL_DIO_Write_Pin>

	if(DIO_Error == PIN_ERROR){
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	21 f0       	breq	.+8      	; 0x258 <ECUAL_LED_OFF+0x2a>
		errorStatus = LED_PIN_ERROR ;
		}else if(DIO_Error == PORT_ERROR){
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	21 f0       	breq	.+8      	; 0x25c <ECUAL_LED_OFF+0x2e>
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	03 c0       	rjmp	.+6      	; 0x25e <ECUAL_LED_OFF+0x30>
	DIO_DConfig.pinNumber = LED_Config->LED_Pin;

	DIO_Error = MCAL_DIO_Write_Pin(&DIO_DConfig,LOW);

	if(DIO_Error == PIN_ERROR){
		errorStatus = LED_PIN_ERROR ;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	01 c0       	rjmp	.+2      	; 0x25e <ECUAL_LED_OFF+0x30>
		}else if(DIO_Error == PORT_ERROR){
		errorStatus = LED_PORT_ERROR ;
 25c:	82 e0       	ldi	r24, 0x02	; 2
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
}
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <main>:
#include "APP/APP.h"


int main(void)
{
	APP_Init();
 268:	0e 94 4a 00 	call	0x94	; 0x94 <APP_Init>
    /* Replace with your application code */
    while (1) 
    {
		APP_Update();
 26c:	0e 94 9d 00 	call	0x13a	; 0x13a <APP_Update>
 270:	fd cf       	rjmp	.-6      	; 0x26c <main+0x4>

00000272 <MCAL_DIO_Init_Pin>:
 * Created: 8/22/2023 11:46:41 PM
 *  Author: Bolis
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
 272:	fc 01       	movw	r30, r24
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
	switch(DIO_Config->portName){
 274:	90 81       	ld	r25, Z
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	71 f1       	breq	.+92     	; 0x2d6 <MCAL_DIO_Init_Pin+0x64>
 27a:	38 f0       	brcs	.+14     	; 0x28a <MCAL_DIO_Init_Pin+0x18>
 27c:	92 30       	cpi	r25, 0x02	; 2
 27e:	09 f4       	brne	.+2      	; 0x282 <MCAL_DIO_Init_Pin+0x10>
 280:	50 c0       	rjmp	.+160    	; 0x322 <MCAL_DIO_Init_Pin+0xb0>
 282:	93 30       	cpi	r25, 0x03	; 3
 284:	09 f4       	brne	.+2      	; 0x288 <MCAL_DIO_Init_Pin+0x16>
 286:	73 c0       	rjmp	.+230    	; 0x36e <MCAL_DIO_Init_Pin+0xfc>
 288:	96 c0       	rjmp	.+300    	; 0x3b6 <MCAL_DIO_Init_Pin+0x144>
		
		case PORT_A:
			if(DIO_Config->direction == OUTPUT){
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	81 f4       	brne	.+32     	; 0x2b0 <MCAL_DIO_Init_Pin+0x3e>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 290:	21 81       	ldd	r18, Z+1	; 0x01
 292:	28 30       	cpi	r18, 0x08	; 8
 294:	08 f0       	brcs	.+2      	; 0x298 <MCAL_DIO_Init_Pin+0x26>
 296:	91 c0       	rjmp	.+290    	; 0x3ba <MCAL_DIO_Init_Pin+0x148>
					SET_BIT(DDRA,DIO_Config->pinNumber);
 298:	3a b3       	in	r19, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <MCAL_DIO_Init_Pin+0x32>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	2a 95       	dec	r18
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <MCAL_DIO_Init_Pin+0x2e>
 2a8:	83 2b       	or	r24, r19
 2aa:	8a bb       	out	0x1a, r24	; 26
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 2b0:	81 11       	cpse	r24, r1
 2b2:	85 c0       	rjmp	.+266    	; 0x3be <MCAL_DIO_Init_Pin+0x14c>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 2b4:	21 81       	ldd	r18, Z+1	; 0x01
 2b6:	28 30       	cpi	r18, 0x08	; 8
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <MCAL_DIO_Init_Pin+0x4a>
 2ba:	83 c0       	rjmp	.+262    	; 0x3c2 <MCAL_DIO_Init_Pin+0x150>
					RESET_BIT(DDRA,DIO_Config->pinNumber);
 2bc:	3a b3       	in	r19, 0x1a	; 26
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <MCAL_DIO_Init_Pin+0x56>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <MCAL_DIO_Init_Pin+0x52>
 2cc:	80 95       	com	r24
 2ce:	83 23       	and	r24, r19
 2d0:	8a bb       	out	0x1a, r24	; 26
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_B:
			if(DIO_Config->direction == OUTPUT){
 2d6:	82 81       	ldd	r24, Z+2	; 0x02
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	81 f4       	brne	.+32     	; 0x2fc <MCAL_DIO_Init_Pin+0x8a>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 2dc:	21 81       	ldd	r18, Z+1	; 0x01
 2de:	28 30       	cpi	r18, 0x08	; 8
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <MCAL_DIO_Init_Pin+0x72>
 2e2:	71 c0       	rjmp	.+226    	; 0x3c6 <MCAL_DIO_Init_Pin+0x154>
					SET_BIT(DDRB,DIO_Config->pinNumber);
 2e4:	37 b3       	in	r19, 0x17	; 23
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <MCAL_DIO_Init_Pin+0x7e>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <MCAL_DIO_Init_Pin+0x7a>
 2f4:	83 2b       	or	r24, r19
 2f6:	87 bb       	out	0x17, r24	; 23
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 2fc:	81 11       	cpse	r24, r1
 2fe:	65 c0       	rjmp	.+202    	; 0x3ca <MCAL_DIO_Init_Pin+0x158>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 300:	21 81       	ldd	r18, Z+1	; 0x01
 302:	28 30       	cpi	r18, 0x08	; 8
 304:	08 f0       	brcs	.+2      	; 0x308 <MCAL_DIO_Init_Pin+0x96>
 306:	63 c0       	rjmp	.+198    	; 0x3ce <MCAL_DIO_Init_Pin+0x15c>
					RESET_BIT(DDRB,DIO_Config->pinNumber);
 308:	37 b3       	in	r19, 0x17	; 23
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <MCAL_DIO_Init_Pin+0xa2>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	2a 95       	dec	r18
 316:	e2 f7       	brpl	.-8      	; 0x310 <MCAL_DIO_Init_Pin+0x9e>
 318:	80 95       	com	r24
 31a:	83 23       	and	r24, r19
 31c:	87 bb       	out	0x17, r24	; 23
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_C:
			if(DIO_Config->direction == OUTPUT){
 322:	82 81       	ldd	r24, Z+2	; 0x02
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	81 f4       	brne	.+32     	; 0x348 <MCAL_DIO_Init_Pin+0xd6>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 328:	21 81       	ldd	r18, Z+1	; 0x01
 32a:	28 30       	cpi	r18, 0x08	; 8
 32c:	08 f0       	brcs	.+2      	; 0x330 <MCAL_DIO_Init_Pin+0xbe>
 32e:	51 c0       	rjmp	.+162    	; 0x3d2 <MCAL_DIO_Init_Pin+0x160>
					SET_BIT(DDRC,DIO_Config->pinNumber);
 330:	34 b3       	in	r19, 0x14	; 20
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <MCAL_DIO_Init_Pin+0xca>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	2a 95       	dec	r18
 33e:	e2 f7       	brpl	.-8      	; 0x338 <MCAL_DIO_Init_Pin+0xc6>
 340:	83 2b       	or	r24, r19
 342:	84 bb       	out	0x14, r24	; 20
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 348:	81 11       	cpse	r24, r1
 34a:	45 c0       	rjmp	.+138    	; 0x3d6 <MCAL_DIO_Init_Pin+0x164>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 34c:	21 81       	ldd	r18, Z+1	; 0x01
 34e:	28 30       	cpi	r18, 0x08	; 8
 350:	08 f0       	brcs	.+2      	; 0x354 <MCAL_DIO_Init_Pin+0xe2>
 352:	43 c0       	rjmp	.+134    	; 0x3da <MCAL_DIO_Init_Pin+0x168>
					RESET_BIT(DDRC,DIO_Config->pinNumber);
 354:	34 b3       	in	r19, 0x14	; 20
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <MCAL_DIO_Init_Pin+0xee>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	2a 95       	dec	r18
 362:	e2 f7       	brpl	.-8      	; 0x35c <MCAL_DIO_Init_Pin+0xea>
 364:	80 95       	com	r24
 366:	83 23       	and	r24, r19
 368:	84 bb       	out	0x14, r24	; 20
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret
				errorStatus = DIRECTION_ERROR ;
			}
			break;
			
		case PORT_D:
			if(DIO_Config->direction == OUTPUT){
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	79 f4       	brne	.+30     	; 0x392 <MCAL_DIO_Init_Pin+0x120>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 374:	21 81       	ldd	r18, Z+1	; 0x01
 376:	28 30       	cpi	r18, 0x08	; 8
 378:	90 f5       	brcc	.+100    	; 0x3de <MCAL_DIO_Init_Pin+0x16c>
					SET_BIT(DDRD,DIO_Config->pinNumber);
 37a:	31 b3       	in	r19, 0x11	; 17
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <MCAL_DIO_Init_Pin+0x114>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	2a 95       	dec	r18
 388:	e2 f7       	brpl	.-8      	; 0x382 <MCAL_DIO_Init_Pin+0x110>
 38a:	83 2b       	or	r24, r19
 38c:	81 bb       	out	0x11, r24	; 17
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else if(DIO_Config->direction == INPUT){
 392:	81 11       	cpse	r24, r1
 394:	26 c0       	rjmp	.+76     	; 0x3e2 <MCAL_DIO_Init_Pin+0x170>
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 396:	21 81       	ldd	r18, Z+1	; 0x01
 398:	28 30       	cpi	r18, 0x08	; 8
 39a:	28 f5       	brcc	.+74     	; 0x3e6 <MCAL_DIO_Init_Pin+0x174>
					RESET_BIT(DDRD,DIO_Config->pinNumber);
 39c:	31 b3       	in	r19, 0x11	; 17
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MCAL_DIO_Init_Pin+0x136>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MCAL_DIO_Init_Pin+0x132>
 3ac:	80 95       	com	r24
 3ae:	83 23       	and	r24, r19
 3b0:	81 bb       	out	0x11, r24	; 17
 */ 
#include "DIO.h"

EN_DIO_STATUS_t MCAL_DIO_Init_Pin(ST_DIO_Config_t* DIO_Config){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
			}else{
				errorStatus = DIRECTION_ERROR ;
			}
			break;
		default:
			errorStatus = PORT_ERROR ;
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	08 95       	ret
		case PORT_A:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	08 95       	ret
					RESET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					RESET_BIT(DDRA,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	08 95       	ret
		case PORT_B:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	08 95       	ret
					RESET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					RESET_BIT(DDRB,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret
		case PORT_C:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	08 95       	ret
					RESET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}		
			}else{
				errorStatus = DIRECTION_ERROR ;
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					RESET_BIT(DDRC,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	08 95       	ret
		case PORT_D:
			if(DIO_Config->direction == OUTPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					SET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret
					RESET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
				}
			}else{
				errorStatus = DIRECTION_ERROR ;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	08 95       	ret
				}
			}else if(DIO_Config->direction == INPUT){
				if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
					RESET_BIT(DDRD,DIO_Config->pinNumber);
				}else{
					errorStatus = PIN_ERROR;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
		default:
			errorStatus = PORT_ERROR ;
			break;
	}
	return errorStatus ;
}
 3e8:	08 95       	ret

000003ea <MCAL_DIO_Write_Pin>:


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
 3ea:	fc 01       	movw	r30, r24
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
		
	switch(DIO_Config->portName){
 3ec:	90 81       	ld	r25, Z
 3ee:	91 30       	cpi	r25, 0x01	; 1
 3f0:	69 f1       	breq	.+90     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f2:	38 f0       	brcs	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	92 30       	cpi	r25, 0x02	; 2
 3f6:	09 f4       	brne	.+2      	; 0x3fa <MCAL_DIO_Write_Pin+0x10>
 3f8:	4e c0       	rjmp	.+156    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 3fa:	93 30       	cpi	r25, 0x03	; 3
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	70 c0       	rjmp	.+224    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 400:	93 c0       	rjmp	.+294    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 402:	81 81       	ldd	r24, Z+1	; 0x01
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	91 c0       	rjmp	.+290    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				if(pinValue==High){
 40a:	61 30       	cpi	r22, 0x01	; 1
 40c:	71 f4       	brne	.+28     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
					SET_BIT(PORTA,DIO_Config->pinNumber);
 40e:	4b b3       	in	r20, 0x1b	; 27
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	b9 01       	movw	r22, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	8a 95       	dec	r24
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	cb 01       	movw	r24, r22
 422:	84 2b       	or	r24, r20
 424:	8b bb       	out	0x1b, r24	; 27
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	08 95       	ret
	switch(DIO_Config->portName){
		case PORT_A:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
				if(pinValue==High){
					SET_BIT(PORTA,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 42a:	61 11       	cpse	r22, r1
 42c:	81 c0       	rjmp	.+258    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
					RESET_BIT(PORTA,DIO_Config->pinNumber);
 42e:	4b b3       	in	r20, 0x1b	; 27
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	cb 01       	movw	r24, r22
 442:	80 95       	com	r24
 444:	84 23       	and	r24, r20
 446:	8b bb       	out	0x1b, r24	; 27
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 44c:	81 81       	ldd	r24, Z+1	; 0x01
 44e:	88 30       	cpi	r24, 0x08	; 8
 450:	08 f0       	brcs	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	70 c0       	rjmp	.+224    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
				if(pinValue==High){
 454:	61 30       	cpi	r22, 0x01	; 1
 456:	71 f4       	brne	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
					SET_BIT(PORTB,DIO_Config->pinNumber);
 458:	48 b3       	in	r20, 0x18	; 24
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	b9 01       	movw	r22, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	cb 01       	movw	r24, r22
 46c:	84 2b       	or	r24, r20
 46e:	88 bb       	out	0x18, r24	; 24
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	08 95       	ret
			
		case PORT_B:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
				if(pinValue==High){
					SET_BIT(PORTB,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 474:	61 11       	cpse	r22, r1
 476:	60 c0       	rjmp	.+192    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					RESET_BIT(PORTB,DIO_Config->pinNumber);
 478:	48 b3       	in	r20, 0x18	; 24
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	cb 01       	movw	r24, r22
 48c:	80 95       	com	r24
 48e:	84 23       	and	r24, r20
 490:	88 bb       	out	0x18, r24	; 24
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 496:	81 81       	ldd	r24, Z+1	; 0x01
 498:	88 30       	cpi	r24, 0x08	; 8
 49a:	08 f0       	brcs	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	4f c0       	rjmp	.+158    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
				if(pinValue==High){
 49e:	61 30       	cpi	r22, 0x01	; 1
 4a0:	71 f4       	brne	.+28     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					SET_BIT(PORTC,DIO_Config->pinNumber);
 4a2:	45 b3       	in	r20, 0x15	; 21
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	84 2b       	or	r24, r20
 4b8:	85 bb       	out	0x15, r24	; 21
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret
			
		case PORT_C:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
				if(pinValue==High){
					SET_BIT(PORTC,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 4be:	61 11       	cpse	r22, r1
 4c0:	3f c0       	rjmp	.+126    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
					RESET_BIT(PORTC,DIO_Config->pinNumber);
 4c2:	45 b3       	in	r20, 0x15	; 21
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	cb 01       	movw	r24, r22
 4d6:	80 95       	com	r24
 4d8:	84 23       	and	r24, r20
 4da:	85 bb       	out	0x15, r24	; 21
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
		
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
 4e0:	81 81       	ldd	r24, Z+1	; 0x01
 4e2:	88 30       	cpi	r24, 0x08	; 8
 4e4:	78 f5       	brcc	.+94     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
				if(pinValue==High){
 4e6:	61 30       	cpi	r22, 0x01	; 1
 4e8:	71 f4       	brne	.+28     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
					SET_BIT(PORTD,DIO_Config->pinNumber);
 4ea:	42 b3       	in	r20, 0x12	; 18
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4fc:	cb 01       	movw	r24, r22
 4fe:	84 2b       	or	r24, r20
 500:	82 bb       	out	0x12, r24	; 18
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret
		
		case PORT_D:
			if(DIO_Config->pinNumber >=0 && DIO_Config->pinNumber <=7 ){
				if(pinValue==High){
					SET_BIT(PORTD,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
 506:	61 11       	cpse	r22, r1
 508:	1f c0       	rjmp	.+62     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
					RESET_BIT(PORTD,DIO_Config->pinNumber);
 50a:	42 b3       	in	r20, 0x12	; 18
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 51c:	cb 01       	movw	r24, r22
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	82 bb       	out	0x12, r24	; 18
}


EN_DIO_STATUS_t MCAL_DIO_Write_Pin(ST_DIO_Data_Config_t* DIO_Config, EN_pinValue_t pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
				errorStatus = PIN_ERROR;
			}
			break;
			
		default:
			errorStatus =PORT_ERROR;
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	08 95       	ret
				}else{
					errorStatus = VALUE_ERROR;
				}
				
			}else{
				errorStatus = PIN_ERROR;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTA,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTA,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	08 95       	ret
					RESET_BIT(PORTB,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTB,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTB,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	08 95       	ret
					RESET_BIT(PORTC,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTC,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTC,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	08 95       	ret
					RESET_BIT(PORTD,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
				}
			}else{
				errorStatus = PIN_ERROR;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	08 95       	ret
				if(pinValue==High){
					SET_BIT(PORTD,DIO_Config->pinNumber);
				}else if(pinValue==LOW){
					RESET_BIT(PORTD,DIO_Config->pinNumber);
				}else{
					errorStatus = VALUE_ERROR;
 548:	84 e0       	ldi	r24, 0x04	; 4
		default:
			errorStatus =PORT_ERROR;
			break;
	}
	return errorStatus;
}
 54a:	08 95       	ret

0000054c <MCAL_EXTI_Init>:
	return errorStatus ;
}



EN_EXTI_STATUS_t MCAL_EXTI_Init(ST_EXTI_Config_t* EXTI_config){
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	00 d0       	rcall	.+0      	; 0x556 <MCAL_EXTI_Init+0xa>
 556:	1f 92       	push	r1
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	8c 01       	movw	r16, r24
	
	EN_EXTI_STATUS_t EXTI_ERROR_STATUS = EXTI_OK ;
	ST_DIO_Config_t DIO_config ; 
	
	SET_BIT(SREG , Global_Interrupt_BIT);
 55e:	8f b7       	in	r24, 0x3f	; 63
 560:	80 68       	ori	r24, 0x80	; 128
 562:	8f bf       	out	0x3f, r24	; 63
	
	if(EXTI_config->EXTI_NAME == INT_0)
 564:	d8 01       	movw	r26, r16
 566:	8c 91       	ld	r24, X
 568:	81 11       	cpse	r24, r1
 56a:	0a c0       	rjmp	.+20     	; 0x580 <MCAL_EXTI_Init+0x34>
	{
		DIO_config.direction = INPUT ;
 56c:	1b 82       	std	Y+3, r1	; 0x03
		DIO_config.pinNumber = PIN2;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	8a 83       	std	Y+2, r24	; 0x02
		DIO_config.portName = PORT_D;
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	89 83       	std	Y+1, r24	; 0x01
		MCAL_DIO_Init_Pin(&DIO_config);
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 39 01 	call	0x272	; 0x272 <MCAL_DIO_Init_Pin>
 57e:	78 c0       	rjmp	.+240    	; 0x670 <MCAL_EXTI_Init+0x124>
	}
	else if (EXTI_config->EXTI_NAME == INT_1)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	09 f0       	breq	.+2      	; 0x586 <MCAL_EXTI_Init+0x3a>
 584:	66 c0       	rjmp	.+204    	; 0x652 <MCAL_EXTI_Init+0x106>
	{
		DIO_config.direction = INPUT ;
 586:	1b 82       	std	Y+3, r1	; 0x03
		DIO_config.pinNumber = PIN3;
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	8a 83       	std	Y+2, r24	; 0x02
		DIO_config.portName = PORT_D;
 58c:	89 83       	std	Y+1, r24	; 0x01
		MCAL_DIO_Init_Pin(&DIO_config);
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	0e 94 39 01 	call	0x272	; 0x272 <MCAL_DIO_Init_Pin>
 596:	6c c0       	rjmp	.+216    	; 0x670 <MCAL_EXTI_Init+0x124>
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_MODE_config->EXTI_NAME == INT_0)
	{
		if (EXTI_MODE_config->EXTI_MODE == LOW_LEVEL_MODE)
 598:	f8 01       	movw	r30, r16
 59a:	81 81       	ldd	r24, Z+1	; 0x01
 59c:	81 11       	cpse	r24, r1
 59e:	07 c0       	rjmp	.+14     	; 0x5ae <MCAL_EXTI_Init+0x62>
		{
			RESET_BIT(MCUCR,ISC00);
 5a0:	85 b7       	in	r24, 0x35	; 53
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,ISC01);
 5a6:	85 b7       	in	r24, 0x35	; 53
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	85 bf       	out	0x35, r24	; 53
 5ac:	6d c0       	rjmp	.+218    	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == LOGICAL_CHANGE_MODE)
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <MCAL_EXTI_Init+0x74>
		{
			SET_BIT(MCUCR,ISC00);
 5b2:	85 b7       	in	r24, 0x35	; 53
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,ISC01);
 5b8:	85 b7       	in	r24, 0x35	; 53
 5ba:	8d 7f       	andi	r24, 0xFD	; 253
 5bc:	85 bf       	out	0x35, r24	; 53
 5be:	64 c0       	rjmp	.+200    	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == FALLING_EDGE_MODE)
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	39 f4       	brne	.+14     	; 0x5d2 <MCAL_EXTI_Init+0x86>
		{
			RESET_BIT(MCUCR,ISC00);
 5c4:	85 b7       	in	r24, 0x35	; 53
 5c6:	8e 7f       	andi	r24, 0xFE	; 254
 5c8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 5ca:	85 b7       	in	r24, 0x35	; 53
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	85 bf       	out	0x35, r24	; 53
 5d0:	5b c0       	rjmp	.+182    	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <MCAL_EXTI_Init+0x8c>
 5d6:	52 c0       	rjmp	.+164    	; 0x67c <MCAL_EXTI_Init+0x130>
		{
			SET_BIT(MCUCR,ISC00);
 5d8:	85 b7       	in	r24, 0x35	; 53
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 5de:	85 b7       	in	r24, 0x35	; 53
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	85 bf       	out	0x35, r24	; 53
 5e4:	51 c0       	rjmp	.+162    	; 0x688 <MCAL_EXTI_Init+0x13c>
		else{
			errorStatus = EXTI_MODE_ERROR;
		}
	}
	
	else if (EXTI_MODE_config->EXTI_NAME == INT_1)
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	09 f0       	breq	.+2      	; 0x5ec <MCAL_EXTI_Init+0xa0>
 5ea:	4a c0       	rjmp	.+148    	; 0x680 <MCAL_EXTI_Init+0x134>
	{
		if (EXTI_MODE_config->EXTI_MODE == LOW_LEVEL_MODE)
 5ec:	d8 01       	movw	r26, r16
 5ee:	11 96       	adiw	r26, 0x01	; 1
 5f0:	8c 91       	ld	r24, X
 5f2:	81 11       	cpse	r24, r1
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <MCAL_EXTI_Init+0xb8>
		{
			RESET_BIT(MCUCR,ISC10);
 5f6:	85 b7       	in	r24, 0x35	; 53
 5f8:	8b 7f       	andi	r24, 0xFB	; 251
 5fa:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,ISC11);
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	87 7f       	andi	r24, 0xF7	; 247
 600:	85 bf       	out	0x35, r24	; 53
 602:	42 c0       	rjmp	.+132    	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == LOGICAL_CHANGE_MODE)
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	39 f4       	brne	.+14     	; 0x616 <MCAL_EXTI_Init+0xca>
		{
			SET_BIT(MCUCR,ISC10);
 608:	85 b7       	in	r24, 0x35	; 53
 60a:	84 60       	ori	r24, 0x04	; 4
 60c:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,ISC11);
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	87 7f       	andi	r24, 0xF7	; 247
 612:	85 bf       	out	0x35, r24	; 53
 614:	39 c0       	rjmp	.+114    	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == FALLING_EDGE_MODE)
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	39 f4       	brne	.+14     	; 0x628 <MCAL_EXTI_Init+0xdc>
		{
			RESET_BIT(MCUCR,ISC10);
 61a:	85 b7       	in	r24, 0x35	; 53
 61c:	8b 7f       	andi	r24, 0xFB	; 251
 61e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 620:	85 b7       	in	r24, 0x35	; 53
 622:	88 60       	ori	r24, 0x08	; 8
 624:	85 bf       	out	0x35, r24	; 53
 626:	30 c0       	rjmp	.+96     	; 0x688 <MCAL_EXTI_Init+0x13c>
		}
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	61 f5       	brne	.+88     	; 0x684 <MCAL_EXTI_Init+0x138>
		{
			SET_BIT(MCUCR,ISC10);
 62c:	85 b7       	in	r24, 0x35	; 53
 62e:	84 60       	ori	r24, 0x04	; 4
 630:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 632:	85 b7       	in	r24, 0x35	; 53
 634:	88 60       	ori	r24, 0x08	; 8
 636:	85 bf       	out	0x35, r24	; 53
 638:	27 c0       	rjmp	.+78     	; 0x688 <MCAL_EXTI_Init+0x13c>
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_config->EXTI_NAME == INT_0)
	{
		SET_BIT(GICR,INT0_Enable_BIT);
 63a:	8b b7       	in	r24, 0x3b	; 59
 63c:	80 64       	ori	r24, 0x40	; 64
 63e:	8b bf       	out	0x3b, r24	; 59
	
}

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0a c0       	rjmp	.+20     	; 0x658 <MCAL_EXTI_Init+0x10c>
	
	if (EXTI_config->EXTI_NAME == INT_0)
	{
		SET_BIT(GICR,INT0_Enable_BIT);
	}
	else if (EXTI_config->EXTI_NAME == INT_1)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	39 f4       	brne	.+14     	; 0x656 <MCAL_EXTI_Init+0x10a>
	{
		SET_BIT(GICR,INT1_Enable_BIT);
 648:	8b b7       	in	r24, 0x3b	; 59
 64a:	80 68       	ori	r24, 0x80	; 128
 64c:	8b bf       	out	0x3b, r24	; 59
	
}

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	03 c0       	rjmp	.+6      	; 0x658 <MCAL_EXTI_Init+0x10c>
		DIO_config.portName = PORT_D;
		MCAL_DIO_Init_Pin(&DIO_config);
	}
	else
	{
		EXTI_ERROR_STATUS = EXTI_NAME_ERROR ;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	01 c0       	rjmp	.+2      	; 0x658 <MCAL_EXTI_Init+0x10c>
	{
		SET_BIT(GICR,INT1_Enable_BIT);
	}
	else
	{
		errorStatus = EXTI_NAME_ERROR;
 656:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	
	
	GP_EXTI_callback[EXTI_config->EXTI_NAME] = EXTI_config->P_IRQ_CallBack;	
 658:	f8 01       	movw	r30, r16
 65a:	22 81       	ldd	r18, Z+2	; 0x02
 65c:	33 81       	ldd	r19, Z+3	; 0x03
 65e:	e0 81       	ld	r30, Z
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	ed 59       	subi	r30, 0x9D	; 157
 668:	ff 4f       	sbci	r31, 0xFF	; 255
 66a:	31 83       	std	Z+1, r19	; 0x01
 66c:	20 83       	st	Z, r18
	
	return EXTI_ERROR_STATUS ;
 66e:	11 c0       	rjmp	.+34     	; 0x692 <MCAL_EXTI_Init+0x146>

static EN_EXTI_STATUS_t MCAL_EXTI_MODE(ST_EXTI_Config_t* EXTI_MODE_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_MODE_config->EXTI_NAME == INT_0)
 670:	d8 01       	movw	r26, r16
 672:	8c 91       	ld	r24, X
 674:	88 23       	and	r24, r24
 676:	09 f4       	brne	.+2      	; 0x67a <MCAL_EXTI_Init+0x12e>
 678:	8f cf       	rjmp	.-226    	; 0x598 <MCAL_EXTI_Init+0x4c>
 67a:	b5 cf       	rjmp	.-150    	; 0x5e6 <MCAL_EXTI_Init+0x9a>
		{
			SET_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	ec cf       	rjmp	.-40     	; 0x658 <MCAL_EXTI_Init+0x10c>
		else{
			errorStatus = EXTI_MODE_ERROR;
		}
	}
	else{
		errorStatus = EXTI_NAME_ERROR;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	ea cf       	rjmp	.-44     	; 0x658 <MCAL_EXTI_Init+0x10c>
		{
			SET_BIT(MCUCR,ISC10);
			SET_BIT(MCUCR,ISC11);
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	e8 cf       	rjmp	.-48     	; 0x658 <MCAL_EXTI_Init+0x10c>

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_config->EXTI_NAME == INT_0)
 688:	f8 01       	movw	r30, r16
 68a:	80 81       	ld	r24, Z
 68c:	81 11       	cpse	r24, r1
 68e:	da cf       	rjmp	.-76     	; 0x644 <MCAL_EXTI_Init+0xf8>
 690:	d4 cf       	rjmp	.-88     	; 0x63a <MCAL_EXTI_Init+0xee>
	
	
	GP_EXTI_callback[EXTI_config->EXTI_NAME] = EXTI_config->P_IRQ_CallBack;	
	
	return EXTI_ERROR_STATUS ;
}
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void){
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	if(GP_EXTI_callback[0] != NULL){
 6c4:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <GP_EXTI_callback>
 6c8:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <GP_EXTI_callback+0x1>
 6cc:	30 97       	sbiw	r30, 0x00	; 0
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_1+0x30>
		GP_EXTI_callback[0]();
 6d0:	09 95       	icall
	}
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void){
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
	if(GP_EXTI_callback[1] != NULL){
 716:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <GP_EXTI_callback+0x2>
 71a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <GP_EXTI_callback+0x3>
 71e:	30 97       	sbiw	r30, 0x00	; 0
 720:	09 f0       	breq	.+2      	; 0x724 <__vector_2+0x30>
		GP_EXTI_callback[1]();
 722:	09 95       	icall
	}
}
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	7f 91       	pop	r23
 732:	6f 91       	pop	r22
 734:	5f 91       	pop	r21
 736:	4f 91       	pop	r20
 738:	3f 91       	pop	r19
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0f be       	out	0x3f, r0	; 63
 740:	0f 90       	pop	r0
 742:	1f 90       	pop	r1
 744:	18 95       	reti

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
